I. Data Service
----------------------------------------------------------------------------------------------------------------------------------------------------------
1. Database Migration Service
-----------------------------------------------------------------------------
DMS
• Quickly and securely migrate databases to AWS, resilient, self healing
• The source database remains available during the migration
• Supports:
	• Homogeneous migrations: ex Oracle to Oracle
	• Heterogeneous migrations: ex Microsoft SQL Server to Aurora
• Continuous Data Replication using CDC
	• Source DB -> EC2 instance Running DMS -> Target DB
• SOURCES:
	• On-Premises and EC2 instances databases: Oracle, MS SQL Server, MySQL, MariaDB, PostgreSQL, MongoDB, SAP, DB2
	• Azure: Azure SQL Database
	• Amazon RDS: all including Aurora
	• Amazon S3
	• DocumentDB
• TARGETS:
	• On-Premises and EC2 instances databases: Oracle, MS SQL Server, MySQL, MariaDB, PostgreSQL, SAP
	• Amazon RDS
	• Redshift, DynamoDB, S3
	• OpenSearch Service
	• Kinesis Data Streams
	• Apache Kafka
	• DocumentDB & Amazon Neptune
	• Redis & Babelfish
• AWS Schema Conversion Tool (SCT)
	• Convert your Database’s Schema from one engine to another
	• Example OLTP: (SQL Server or Oracle) to MySQL, PostgreSQL, Aurora
	• Example OLAP: (Teradata or Oracle) to Amazon Redshift
	• Prefer compute-intensive instances to optimize data conversions
	• You do not need to use SCT if you are migrating the same DB engine
		• Ex: On-Premise PostgreSQL => RDS PostgreSQL
		• The DB engine is still PostgreSQL (RDS is the platform) Source DB DMS + SCT Target DB (different engine)


II. Example
----------------------------------------------------------------------------------------------------------------------------------------------------------
1. RDS & Aurora MySQL Migrations
-----------------------------------------------------------------------------
RDS MySQL to Aurora MySQL
• Option 1: DB Snapshots from RDS MySQL restored as MySQL Aurora DB
• Option 2: Create an Aurora Read Replica from your RDS MySQL, and when the replication lag is 0, promote it as its own DB cluster (can take time and cost $)

External MySQL to Aurora MySQL
• Option 1:
	• Use Percona XtraBackup to create a file backup in Amazon S3
	• Create an Aurora MySQL DB from Amazon S3
• Option 2:
	• Create an Aurora MySQL DB
	• Use the mysqldump utility to migrate MySQL into Aurora (slower than S3 method)
• Use DMS if both databases are up and running


2. RDS & Aurora MySQL Migrations
-----------------------------------------------------------------------------
RDS PostgreSQL to Aurora PostgreSQL
• Option 1: DB Snapshots from RDS PostgreSQL restored as PostgreSQL Aurora DB
• Option 2: Create an Aurora Read Replica from your RDS PostgreSQL, and when the replication lag is 0, promote it as its own DB cluster (can take time and cost $)
	
External PostgreSQL to Aurora PostgreSQL
• Create a backup and put it in Amazon S3
• Import it using the aws_s3 Aurora extension
• Use DMS if both databases are up and running